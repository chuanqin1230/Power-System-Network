diff -ru lapack-3.2.2/SRC/dlarft.f lapack-3.2.2-new/SRC/dlarft.f
--- lapack-3.2.2/SRC/dlarft.f	2009-04-16 20:10:16.000000000 +0200
+++ lapack-3.2.2-new/SRC/dlarft.f	2010-10-06 21:47:53.000000000 +0200
@@ -145,9 +145,15 @@
                V( I, I ) = ONE
                IF( LSAME( STOREV, 'C' ) ) THEN
 !                 Skip any trailing zeros.
-                  DO LASTV = N, I+1, -1
-                     IF( V( LASTV, I ).NE.ZERO ) EXIT
-                  END DO
+                  LASTV = N
+ 14               IF (V(LASTV, I ) .NE. ZERO) GOTO 15
+                  IF (LASTV .EQ. I+1) GOTO 15
+                  LASTV = LASTV - 1
+                  GOTO 14
+ 15               CONTINUE
+*                 DO LASTV = N, I+1, -1
+*                    IF( V( LASTV, I ).NE.ZERO ) EXIT
+*                 END DO
                   J = MIN( LASTV, PREVLASTV )
 *
 *                 T(1:i-1,i) := - tau(i) * V(i:j,1:i-1)' * V(i:j,i)
@@ -157,9 +163,16 @@
      $                        T( 1, I ), 1 )
                ELSE
 !                 Skip any trailing zeros.
-                  DO LASTV = N, I+1, -1
-                     IF( V( I, LASTV ).NE.ZERO ) EXIT
-                  END DO
+                  LASTV = N
+ 16               IF (V(I, LASTV) .NE. ZERO) GOTO 17
+                  IF (LASTV .EQ. I+1) GOTO 17
+                  LASTV = LASTV - 1 
+                  GOTO 16
+ 17               CONTINUE
+*                 DO LASTV = N, I+1, -1
+*                    IF( V( I, LASTV ).NE.ZERO ) EXIT
+*                 END DO
+
                   J = MIN( LASTV, PREVLASTV )
 *
 *                 T(1:i-1,i) := - tau(i) * V(1:i-1,i:j) * V(i,i:j)'
@@ -201,9 +214,16 @@
                      VII = V( N-K+I, I )
                      V( N-K+I, I ) = ONE
 !                    Skip any leading zeros.
-                     DO LASTV = 1, I-1
-                        IF( V( LASTV, I ).NE.ZERO ) EXIT
-                     END DO
+                     LASTV = 1
+ 34                  IF (V(LASTV, I) .NE. ZERO) GOTO 35
+                     IF (LASTV .EQ. I-1) GOTO 35
+                     LASTV = LASTV + 1
+                     GOTO 34
+ 35                  CONTINUE
+*                    DO LASTV = 1, I-1
+*                       IF( V( LASTV, I ).NE.ZERO ) EXIT
+*                    END DO
+
                      J = MAX( LASTV, PREVLASTV )
 *
 *                    T(i+1:k,i) :=
@@ -217,9 +237,14 @@
                      VII = V( I, N-K+I )
                      V( I, N-K+I ) = ONE
 !                    Skip any leading zeros.
-                     DO LASTV = 1, I-1
-                        IF( V( I, LASTV ).NE.ZERO ) EXIT
-                     END DO
+                     LASTV = 1
+ 36                  IF (V(I, LASTV) .NE. ZERO) GOTO 37
+                     IF (LASTV .EQ. I-1) GOTO 37
+                     LASTV = LASTV + 1
+ 37                  CONTINUE
+*                    DO LASTV = 1, I-1
+*                       IF( V( I, LASTV ).NE.ZERO ) EXIT
+*                    END DO
                      J = MAX( LASTV, PREVLASTV )
 *
 *                    T(i+1:k,i) :=
diff -ru lapack-3.2.2/SRC/xerbla.f lapack-3.2.2-new/SRC/xerbla.f
--- lapack-3.2.2/SRC/xerbla.f	2009-04-16 20:10:16.000000000 +0200
+++ lapack-3.2.2-new/SRC/xerbla.f	2010-10-08 17:53:21.000000000 +0200
@@ -33,7 +33,7 @@
 * =====================================================================
 *
 *     .. Intrinsic Functions ..
-      INTRINSIC          LEN_TRIM
+      EXTERNAL          LEN_TRIM
 *     ..
 *     .. Executable Statements ..
 *
diff -ru lapack-3.3.1/INSTALL/dlamch.f lapack-3.3.1-new/INSTALL/dlamch.f
--- lapack-3.3.1/INSTALL/dlamch.f	2011-04-26 12:41:18.000000000 -0400
+++ lapack-3.3.1-new/INSTALL/dlamch.f	2011-04-26 12:41:22.000000000 -0400
@@ -60,8 +60,8 @@
       EXTERNAL           LSAME
 *     ..
 *     .. Intrinsic Functions ..
-      INTRINSIC          DIGITS, EPSILON, HUGE, MAXEXPONENT,
-     $                   MINEXPONENT, RADIX, TINY
+      EXTERNAL           DIGITSDBL, EPSILONDBL, HUGEDBL, MAXEXPONENTDBL,
+     $                   MINEXPONENTDBL, RADIXDBL, TINYDBL
 *     ..
 *     .. Executable Statements ..
 *
@@ -71,16 +71,16 @@
       RND = ONE
 *
       IF( ONE.EQ.RND ) THEN
-         EPS = EPSILON(ZERO) * 0.5
+         EPS = EPSILONDBL(ZERO) * 0.5
       ELSE
-         EPS = EPSILON(ZERO)
+         EPS = EPSILONDBL(ZERO)
       END IF
 *
       IF( LSAME( CMACH, 'E' ) ) THEN
          RMACH = EPS
       ELSE IF( LSAME( CMACH, 'S' ) ) THEN
-         SFMIN = TINY(ZERO)
-         SMALL = ONE / HUGE(ZERO)
+         SFMIN = TINYDBL(ZERO)
+         SMALL = ONE / HUGEDBL(ZERO)
          IF( SMALL.GE.SFMIN ) THEN
 *
 *           Use SMALL plus a bit, to avoid the possibility of rounding
@@ -90,21 +90,21 @@
          END IF
          RMACH = SFMIN
       ELSE IF( LSAME( CMACH, 'B' ) ) THEN
-         RMACH = RADIX(ZERO)
+         RMACH = RADIXDBL(ZERO)
       ELSE IF( LSAME( CMACH, 'P' ) ) THEN
-         RMACH = EPS * RADIX(ZERO)
+         RMACH = EPS * RADIXDBL(ZERO)
       ELSE IF( LSAME( CMACH, 'N' ) ) THEN
-         RMACH = DIGITS(ZERO)
+         RMACH = DIGITSDBL(ZERO)
       ELSE IF( LSAME( CMACH, 'R' ) ) THEN
          RMACH = RND
       ELSE IF( LSAME( CMACH, 'M' ) ) THEN
-         RMACH = MINEXPONENT(ZERO)
+         RMACH = MINEXPONENTDBL(ZERO)
       ELSE IF( LSAME( CMACH, 'U' ) ) THEN
-         RMACH = tiny(zero)
+         RMACH = TINYDBL(zero)
       ELSE IF( LSAME( CMACH, 'L' ) ) THEN
-         RMACH = MAXEXPONENT(ZERO)
+         RMACH = MAXEXPONENTDBL(ZERO)
       ELSE IF( LSAME( CMACH, 'O' ) ) THEN
-         RMACH = HUGE(ZERO)
+         RMACH = HUGEDBL(ZERO)
       ELSE
          RMACH = ZERO
       END IF
